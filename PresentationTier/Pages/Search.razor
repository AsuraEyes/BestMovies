@page "/search"
@using PresentationTier.Data.Media
@using PresentationTier.Models
@using Orientation = Radzen.Orientation

@inject NavigationManager NavigationManager

@inject IMediaService MediaService

<PageTitle>TV Shows</PageTitle>
<RadzenRow Style="width: 1720px">
    <RadzenStack Style="margin: 45px 160px; width: 1600px">
        <RadzenText Text="Search" TextStyle="TextStyle.DisplayH4"/>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0" Style="position: relative" JustifyContent="JustifyContent.Center">
                <RadzenTextBox Placeholder="Search..." @bind-Value="@search" Style="border-radius: 25px 0 0 25px; border: 1px solid rgb(33, 33, 33); width: 500px"/>
                <RadzenButton Style="border-radius: 0 25px 25px 0;" ButtonStyle="ButtonStyle.Dark" Icon="search" Variant="Variant.Outlined" Click="SearchTVShow"/>
            </RadzenStack>
        <RadzenRow>
            @foreach (var item in results)
            {
                @if (item.Type.Equals("movie"))
                {
                    <RadzenStack>
                        <RadzenCard onclick="@(() => NavigateToMovie(item.Id))" Style="padding: 0; min-width: 150px; max-width: 150px; min-height: 225px; border-radius: 10px">
                            <RadzenImage Path="@item.Poster" Style="max-width: 100%; min-height: 100%; border-radius: 10px"/>
                        </RadzenCard>
                        <RadzenText>@item.Title</RadzenText>
                    </RadzenStack>
                }
                else if(item.Type.Equals("tv"))
                {
                    <RadzenStack>
                        <RadzenCard onclick="@(() => NavigateToTVShow(item.Id))" Style="padding: 0; min-width: 150px; max-width: 150px; min-height: 225px; border-radius: 10px">
                            <RadzenImage Path="@item.Poster" Style="max-width: 100%; min-height: 100%; border-radius: 10px"/>
                        </RadzenCard>
                        <RadzenText>@item.Name</RadzenText>
                    </RadzenStack>
                }
                else
                {
                    <RadzenStack>
                        <RadzenCard onclick="@(() => NavigateToPerson(item.Id))" Style="padding: 0; min-width: 150px; max-width: 150px; min-height: 225px; border-radius: 10px">
                            <RadzenImage Path="@item.Picture" Style="max-width: 100%; min-height: 100%; border-radius: 10px"/>
                        </RadzenCard>
                        <RadzenText>@item.Name</RadzenText>
                    </RadzenStack>
                }
            }
        </RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" Style="position: relative; left: 50%; bottom: 0">
                @switch (Page)
                {
                    case < 1:
                        <RadzenButton Text="Previous" Variant="@Variant.Outlined" ButtonStyle="@ButtonStyle.Dark" Click="@Previous" Disabled="true"/>
                        <RadzenButton Text="Next" Variant="@Variant.Outlined" ButtonStyle="@ButtonStyle.Dark" Click="@Next"/>
                        break;
                    case > 500:
                        <RadzenButton Text="Previous" Variant="@Variant.Outlined" ButtonStyle="@ButtonStyle.Dark" Click="@Previous"/>
                        <RadzenButton Text="Next" Variant="@Variant.Outlined" ButtonStyle="@ButtonStyle.Dark" Click="@Next" Disabled="true"/>
                        break;
                    default:
                        <RadzenButton Text="Previous" Variant="@Variant.Outlined" ButtonStyle="@ButtonStyle.Dark" Click="@Previous" Style="border-radius: 25px"/>
                        <RadzenButton Text="Next" Variant="@Variant.Outlined" ButtonStyle="@ButtonStyle.Dark" Click="@Next" Style="border-radius: 25px"/>
                        break;
                }
            </RadzenStack>
    </RadzenStack>
</RadzenRow>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "query")]
    public string search { get; set;}
    private int Page = 1;

    private MediaList media = new ();
    private Media[] results = {};

    protected override async Task OnInitializedAsync()
    {
        media = await MediaService.GetSearchAsync(search, Page);
        results = media.ListOfMedia;
    }
    
    private void SearchTVShow()
    {
        NavigationManager.NavigateTo($"/search?query={search}");
    }

    private async Task Next()
    {
        Page++;
        await OnInitializedAsync();
    }
    
    private async Task Previous()
    {
        Page--;
        await OnInitializedAsync();
    }
    
    private void NavigateToMovie(int id)
    {
        NavigationManager.NavigateTo($"/movie/{id}");
    }
    
    private void NavigateToTVShow(int id)
    {
        NavigationManager.NavigateTo($"/tv/{id}",true);
    }
    
    private void NavigateToPerson(int id)
    {
        NavigationManager.NavigateTo($"/person/{id}");
    }
}