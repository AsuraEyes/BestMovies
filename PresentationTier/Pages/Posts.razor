@page "/Posts"

@using PresentationTier.Models
@using System.Collections.Generic
@using PresentationTier.Data
@using System.Security.Claims
@inject IPostService postService
@inject IUserService userService
@inject AuthenticationStateProvider authenticationStateProvider

<style>
    .profile-pic {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        padding-bottom: 10px;
    }

    .icon {
        fill: gray;
        width: 24px;
        height: 24px;
        cursor: pointer;
    }

        .icon.active {
            fill: green;
        }

    .editor {
        background-color: white;
        padding: 40px;
        border-radius: 5px;
        box-shadow: 0px 0px 5px 1px rgba(0, 0, 0, 0.1);
    }

    .editor1 {
        background-color: aliceblue;
        padding: 40px;
        border-radius: 5px;
        box-shadow: 0px 0px 5px 1px rgba(0, 0, 0, 0.1);
    }

    .editor h1 {
        font-size: 36px;
        margin-bottom: 30px;
    }

    .editor input,
    .editor textarea {
        background-color: #F1F3F5;
        border: none;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 20px;
        font-size: 18px;
        color: #4B5563;
        width: 100%;
    }

    .editor button {
        background-color: #4F46E5;
        border: none;
        border-radius: 5px;
        color: white;
        padding: 15px;
        font-size: 18px;
        transition: all 0.2s ease-in-out;
    }

        .editor button:hover {
            background-color: #4338CA;
            cursor: pointer;
        }

    .grid-container {
        display: grid;
        grid-template-columns: 1fr auto;
        grid-gap: 20px;
    }

    .right-column {
        position: sticky;
        top: 20px;
        height: 1000px;
        overflow-y: auto;
    }
</style>

<div class="grid-container">
    <div class="left-column">
        <AuthorizeView>
            <Authorized>
                <div class="RadzenCard" style="border-radius: 10px; width: 770px">
                    <div class="editor">
                        <h1>Create a Post</h1>
                        <div class="profile-info" style="display: flex; align-items: center;">
                            <div class="form-label" style="margin-left: 10px;">@currentUser.Email</div>
                        </div>
                        <textarea @bind="@newPost.Content" style="font-size: 18px;"></textarea>
                        <button class="btn btn-primary float-right" @onclick="CreatePost">Post</button>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <p>Please log in to create a post.</p>
            </NotAuthorized>
        </AuthorizeView>
        <div class="RadzenCard" style="margin-top: 10px">
            @foreach (var post in posts)
            {
                <div class="RadzenCard" style="width: 769px; height: 256px; margin-top: 10px;">
                    <RadzenCard Style="width: 755px; height: 262px;">
                        <RadzenStack Orientation="Radzen.Orientation.Horizontal">
                            <RadzenImage Path="https://bootdey.com/img/Content/avatar/avatar6.png" Style="width: 50px; border-radius: 50%;" />
                            <RadzenStack Gap="0">
                                <RadzenText TextStyle="TextStyle.Caption">@post.PostedBy</RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                        <RadzenText Style="padding-top: 10px">@post.Content</RadzenText>
                        <div style="display: flex; justify-content: space-between; margin-top: 10px;">
                            <img id="likeIcon" width="30" height="30" src="/images/icons/thumbs-up-solid.svg" onclick="ToggleLike()" />
                            <img id="dislikeIcon" width="30" height="30" src="/images/icons/thumbs-down-solid.svg" onclick="dislikePost()" />
                            <img src="/images/icons/comment-solid.svg" width="30" height="30" />
                            <img src="/images/icons/share-nodes-solid.svg" width="30" height="30" />
                        </div>
                    </RadzenCard>
                </div>
            }
        </div>
    </div>
    <div class="right-column">
        <div class="RadzenCard">
            <div class="editor">
                <RadzenStack Gap="25" JustifyContent="Radzen.JustifyContent.Normal" Orientation="Radzen.Orientation.Vertical">
                    <h1>#Trending</h1>
                    <RadzenCard>
                        <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="10">
                            <RadzenImage Path="https://bootdey.com/img/Content/avatar/avatar6.png" Style="width: 50px; border-radius: 50%;" />
                            <RadzenStack Gap="0">
                                <RadzenText TextStyle="TextStyle.DisplayH6">Test Post</RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption">Test Poster</RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenStack>
            </div>
        </div>
    </div>
</div>


@code {
    private User currentUser = new User();
    private Post newPost = new Post();
    private List<Post> posts = new List<Post>();

    protected override async Task OnInitializedAsync()
    {
        // Call the ValidateUser method to validate the user
        var currentUser = await userService.ValidateUser("shrhrhd", "kebab");

        // Refresh the authentication state
        await RefreshAuthenticationState();

        // Fetch all posts
        posts = await postService.GetAllPosts();

        //// Populate the PostedBy property with the user's email
        //foreach (var post in posts)
        //{
        //    post.PostedBy = postService.GetPostedByEmail(post.PostedBy);
        //}

        // Call the base OnInitializedAsync method
        await base.OnInitializedAsync();
    }

    private async Task RefreshAuthenticationState()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Create a new ClaimsIdentity with the updated user claims
        var identity = new ClaimsIdentity(user.Claims);

        // Create a new ClaimsPrincipal with the updated identity
        var updatedUser = new ClaimsPrincipal(identity);

        // Update the authentication state with the new ClaimsPrincipal
        // await authenticationStateProvider.SetAuthenticationStateAsync(new AuthenticationState(updatedUser));
    }

    private async Task CreatePost()
    {
        newPost.PostedDate = DateTime.Now;

        // Get the current user's email using your custom user service
        var currentUser = await userService.GetCurrentUser();
        newPost.PostedBy = currentUser.Email;

        await postService.SavePost(newPost);

        // Reset the post creation form
        newPost = new Post();
    }
}
