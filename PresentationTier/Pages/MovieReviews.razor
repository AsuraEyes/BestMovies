@page "/movie/{Id:int}/reviews"
@using PresentationTier.Models
@using PresentationTier.Data.Media
@using PresentationTier.Data
@using PresentationTier.Authorization
@using System.Security.Claims

@inject NavigationManager NavigationManager

@inject IMovieService MovieService
@inject IReviewService ReviewService
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>@movie.Title - Reviews</PageTitle>
<RadzenStack Gap="45">
    <RadzenStack Style="width: 100%; max-height: 200px; background-color: rgba(0, 0, 0, 0.8)">
        <RadzenImage Path="@movie.Backdrop" Style="opacity: 40%; mask-image: linear-gradient(to top, transparent 750px, black); pointer-events: none"/>
        <RadzenStack Orientation="Orientation.Horizontal" Style="position: absolute; margin: 45px 160px; width: 1400px">
            <RadzenImage Path="@movie.Poster" Style="max-height: 125px; padding-left: 5px; padding-top: 5px; padding-bottom: 5px"/>
            <RadzenStack Gap="0" Style="width: 100%">
                <RadzenText Style="margin-top: 15px; color: #ffffff; font-weight: 100" TextStyle="TextStyle.DisplayH4">
                    <RadzenLink Path="@NavigateToMovie(Id)" Style="color: #ffffff; font-weight: 600">@movie.Title</RadzenLink> (@movie.ReleaseDate.Year)
                </RadzenText>
                <RadzenLink Text="← Back to main" Path="@NavigateToMovie(Id)"/>
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>

    <RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" Style="width: 100%; margin-left: 10%; margin-right: 10%">
            <AuthorizeView Policy="Reviewer">
                <Authorized>
                    <RadzenButton Text="Write Review" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Dark" Icon="edit" Style="border-radius: 25px; max-height: 36px" Click="Open"/>
                </Authorized>
                <NotAuthorized>
                    <RadzenButton Text="Write Review" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Dark" Icon="edit" Style="border-radius: 25px; max-height: 36px" Click="LogIn"/>
                </NotAuthorized>
            </AuthorizeView>
            @if (Display)
            {
                <RadzenContent Style="position: fixed; inset: 0; padding: 0; background-color: rgba(0, 0, 0, 0.6)">
                    <RadzenStack Style="position: fixed; width: 50%; left: 50%; transform: translate(-50%,0); top: 10%; background-color: black" Gap="0">
                        <RadzenCard>
                            <RadzenStack Gap="15" JustifyContent="JustifyContent.Center">
                                <RadzenText Text="Title"/>
                                <RadzenTextBox @bind-Value="@newReview.Title"/>
                                <RadzenText Text="Review"/>
                                <RadzenTextArea Placeholder="Write review here" @bind-Value="@newReview.Description"/>
                                <RadzenRating @bind-Value="@newReview.Score"/>
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
                                    <RadzenButton ButtonType="ButtonType.Submit" Icon="create" Text="Post" Click="Submit" Style="border-radius: 25px"/>
                                    <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Icon="cancel" Text="Cancel" Click="Close" Style="border-radius: 25px"/>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenCard>
                    </RadzenStack>
                </RadzenContent>
            }
            <RadzenStack Gap="25">
                @if (reviews.Length != 0)
                {
                    @foreach (var review in reviews)
                    {
                        <RadzenCard Style="border-radius: 10px; max-width: 650px; min-width: 650px">
                            <RadzenStack Orientation="Orientation.Horizontal">
                                <RadzenImage Path="https://bootdey.com/img/Content/avatar/avatar6.png" Style="width: 50px; border-radius: 50%"/>
                                <RadzenStack Gap="0" Style="width: 100%">
                                    <RadzenText TextStyle="TextStyle.DisplayH6">@review.Title</RadzenText>
                                    <RadzenRow Gap="5">
                                        <RadzenText TextStyle="TextStyle.Caption" Text="@review.Username"/>
                                        <RadzenText TextStyle="TextStyle.Caption">
                                            @review.Created.ToString("dd MMMM yyyy")
                                        </RadzenText>
                                    </RadzenRow>
                                </RadzenStack>
                            </RadzenStack>
                            <RadzenText Style="padding-top: 10px">@review.Description</RadzenText>
                            <RadzenRating Value="review.Score" ReadOnly=true></RadzenRating>
                        </RadzenCard>
                    }
                }
                else
                {
                    <RadzenText Text="There are currently no reviews for this movie"/>
                }
            </RadzenStack>
        </RadzenStack>
    </RadzenRow>
</RadzenStack>

@code {
    [Parameter]
    public int Id { get; set; }

    private Movie movie = new();
    private Review newReview = new();
    private Review[] reviews = { };
    private bool Display;

    protected override async Task OnInitializedAsync()
    {
        movie = await MovieService.GetMovieAsync(Id);
        reviews = await ReviewService.GetAllReviewsAsync(Id);
    }

    private static string NavigateToMovie(int id)
    {
        return $"movie/{id}";
    }
    
    private async Task Submit()
    {
        newReview.MediaId = Id;
        newReview.Email = ((CustomAuthenticationStateProvider)authenticationStateProvider)
            .GetAuthenticationStateAsync().Result.User.FindFirst(claim => claim.Type.Equals(ClaimTypes.Email))?.Value;
        Console.WriteLine("Id: " + newReview.Id + "\nEmail: " + newReview.Email);
        await ReviewService.WriteReviewAsync(newReview);
        reviews = await ReviewService.GetAllReviewsAsync(Id);
        Close();
    }
    
    private void Open()
    {
        Display = true;
    }
    
    private void LogIn()
    {
        NavigationManager.NavigateTo("/login");
    }
    
    private void Close()
    {
        Display = false;
    }
}